/* ==========================================================================
  Functions
========================================================================== */

$base-font-size: 16px;

/* ==========================================================================
  Strip unit
========================================================================== */

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// // alias to mq-px2em from sass-mq; replace if sass-mq is removed
// @function px2em($px, $base-font-size: $mq-base-font-size) {
//   @return mq-px2em($px, $base-font-size);
// }

// @function px2rem($px) {
//   @return strip-unit(mq-px2em($px, $base-font-size)) + 0rem;
// }

// // shortcut for the preferred px-conversion function
// @function px($px) {
//   @return px2rem(strip-unit($px) * 1px);
// }

/* ==========================================================================
  Convert PX to REM
========================================================================== */

@function convert-to-rem($value, $base-value: $base-font-size) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;

  // @if (quote($value) == '0rem') { $value: 0; } // Turn 0rem into 0

  @return $value;
}

@function rem($values, $base-value: $base-font-size) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $rem-values: ();

  @for $i from 1 through $max {
    $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base-value));
  }

  @return $rem-values;
}
